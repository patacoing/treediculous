on:
  workflow_call:
    inputs:
      deploy-api:
        type: boolean
        default: true
      api-version:
        type: string
        required: true
      web-version:
        type: string
        required: true
      terraform-version:
        type: string
        default: "1.5.7"
      working-directory:
        type: string
        default: "deployment"
      environment:
        type: string
        default: "treediculous"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GIT_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up env vars
        run: |
          AZURE_CREDENTIALS='${{ secrets.AZURE_CREDENTIALS }}'
          
          echo "ARM_CLIENT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r ".clientId")" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(echo "$AZURE_CREDENTIALS" | jq -r ".clientSecret")" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r ".tenantId")" >> $GITHUB_ENV
          
          echo "TF_VAR_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_api_version=${{ inputs.api-version }}" >> $GITHUB_ENV
          echo "TF_VAR_web_version=${{ inputs.web-version }}" >> $GITHUB_ENV
          echo "TF_VAR_ovh_application_key=${{ secrets.OVH_APPLICATION_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_ovh_application_secret=${{ secrets.OVH_APPLICATION_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_ovh_consumer_key=${{ secrets.OVH_CONSUMER_KEY }}" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: deployment
        run: |
          cd ${{ inputs.working-directory }}
          terraform init

      - name: Terraform Plan
        id: terraform_plan
        run: |
          cd ${{ inputs.working-directory }}
          terraform plan -no-color -out=tfplan > tfplantxt
          {
          echo "plan<<EOF"
          cat tfplantxt
          echo "EOF"
          } >> $GITHUB_OUTPUT

      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GIT_TOKEN }}
          approvers: patacoing
          minimum-approvals: 1
          issue-title: "Deploying new version of $(if eq(inputs.deploy-api, 'true') then 'api' else 'web')"
          issue-body: "Review the terraform plan, then approve or deny the deployment of the new api version. \n\n ${{ steps.terraform_plan.outputs.plan }}"
          exclude-workflow-initiator-as-approver: false

      - name: Terraform Apply
        working-directory: deployment
        run: terraform apply -auto-approve tfplan