on:
  push:
    tags:
      - "api-*"

env:
  AZURE_RESOURCE_GROUP: "treediculous-grp"
  AZURE_WORKSPACE: "treediculous-ml-grp"
  AZURE_LOCATION: "northeurope"
  PYTHON_VERSION: "3.10.15"
  DOCKER_REGISTRY: "ghcr.io"
  AZURE_API_NAME: "treediculous-api"
  TERRAFORM_VERSION: "1.5.7"

permissions:
  contents: write
  packages: write
  issues: write

jobs:
  build-push-api-docker-image:
    runs-on: ubuntu-latest
    environment: treediculous
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry install

      - name: azure login
        uses: azure/login@v2
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Install Azure CLI ML extension
        run: az extension add --name ml

      - name: Download latest model
        working-directory: pipeline
        env:
          DOWNLOAD_PATH: "../app"
        run: ./run_download_model.sh latest ${{ env.AZURE_RESOURCE_GROUP }} ${{ env.AZURE_WORKSPACE }} ${{ env.AZURE_LOCATION }} ${{ secrets.AZURE_SUBSCRIPTION_ID }} ${{ env.DOWNLOAD_PATH }}

      - name: Push docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: api.Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/patacoing/treediculous:${{ github.ref_name }}

  deploy-api:
    runs-on: ubuntu-latest
    environment: treediculous
    needs: build-push-api-docker-image

    steps:
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: azure login
        uses: azure/login@v2
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Terraform Init
        working-directory: deployment
        run: terraform init

      - name: Terraform Plan
        id: terraform_plan
        working-directory: deployment
        run: |
          export TF_VAR_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}
          export TF_VAR_api_version=${{ github.ref_name }}
          export TF_VAR_web_version=$(git describe --tags --abbrev=0 --match "web-*")
          export TF_VAR_ovh_application_key=${{ secrets.OVH_APPLICATION_KEY }}
          export TF_VAR_ovh_application_secret=${{ secrets.OVH_APPLICATION_SECRET }}
          export TF_VAR_ovh_consumer_key=${{ secrets.OVH_CONSUMER_KEY }}

          terraform plan -no-color > tfplan
          echo "plan=$(cat tfplan)" >> $GITHUB_ENV

      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GIT_TOKEN }}
          approvers: patacoing
          minimum-approvals: 1
          issue-title: "Deploying new version of api"
          issue-body: "Review the terraform plan, then approve or deny the deployment of the new api version. \n\n ${{ steps.terraform_plan.outputs.plan }}"
          exclude-workflow-initiator-as-approver: false

      - name: Terraform Apply
        working-directory: deployment
        run: terraform apply -auto-approve tfplan