on:
  push:
    tags:
      - "web-*"

env:
  AZURE_RESOURCE_GROUP: "treediculous-grp"
  DOCKER_REGISTRY: "ghcr.io"
  AZURE_WEBAPP_NAME: "treediculous-web"
  TERRAFORM_VERSION: "1.5.7"

permissions:
  contents: write
  packages: write
  issues: write

jobs:
  build-push-web-docker-image:
    runs-on: ubuntu-latest
    environment: treediculous
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          token: ${{ secrets.GIT_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Push docker image
        uses: docker/build-push-action@v6
        with:
          context: webapp
          file: webapp/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/patacoing/treediculous:${{ github.ref_name }}

  deploy-web:
    runs-on: ubuntu-latest
    environment: treediculous
    needs: build-push-web-docker-image

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          token: ${{ secrets.GIT_TOKEN }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - uses: azure/login@v2
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Set up env vars
        run: |
          AZURE_CREDENTIALS='${{ secrets.AZURE_CREDENTIALS }}'
          
          echo "ARM_CLIENT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r ".clientId")" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(echo "$AZURE_CREDENTIALS" | jq -r ".clientSecret")" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(echo "$AZURE_CREDENTIALS" | jq -r ".tenantId")" >> $GITHUB_ENV
          
          echo "TF_VAR_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_api_version=api-0.3.2" >> $GITHUB_ENV
          echo "TF_VAR_web_version=web-0.6.3" >> $GITHUB_ENV
          echo "TF_VAR_ovh_application_key=${{ secrets.OVH_APPLICATION_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_ovh_application_secret=${{ secrets.OVH_APPLICATION_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_ovh_consumer_key=${{ secrets.OVH_CONSUMER_KEY }}" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: deployment
        run: terraform init

      - name: Terraform Plan
        id: terraform_plan
        working-directory: deployment
        run: |
          terraform plan -no-color > tfplan
          {
            echo "plan<<EOF"
            cat tfplan
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GIT_TOKEN }}
          approvers: patacoing
          minimum-approvals: 1
          issue-title: "Deploying new version of web"
          issue-body: "Review the terraform plan, then approve or deny the deployment of the new web version. \n\n ${{ steps.terraform_plan.outputs.plan }}"
          exclude-workflow-initiator-as-approver: false

      - name: Terraform Apply
        working-directory: deployment
        run: terraform apply -auto-approve tfplan